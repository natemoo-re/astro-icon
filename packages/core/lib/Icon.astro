---
import icons, { config } from "virtual:astro-icon";
import { getIconData, iconToSVG } from "@iconify/utils";
import { cache } from "./cache.js";

interface Props {
  name: import("astro-icon").Icon;
  title?: string;
  size?: number;
  width?: number;
  height?: number;
}

const req = Astro.request;
const { name = "", title, ...props } = Astro.props;
const map = cache.get(req) ?? new Map();
const i = map.get(name) ?? 0;
map.set(name, i + 1);
cache.set(req, map);

const includeSymbol = i === 0;

let [set, icon] = name.split(":");

// TODO: prioritize local icons
const collection = Object.values(icons).find((collection) => {
  if (icon === undefined) {
    return set in collection.icons;
  }
  return collection.prefix === set;
});

if (!collection) {
  const err: any = new Error(`Unable to locate "${name}" icon!`);

  if (import.meta.env.DEV) {
    const { include = {} } = config;
    const sets = Object.keys(include);
    if (set && icon) {
      if (!sets.includes(set)) {
        err.hint = `It looks like the "${set}" set is not included in your configuration.\n\nDo you need to add the "${set}" set?`;
      }
    } else {
      if (sets.length === 1) {
        err.hint = `The "${sets[0]}" set does not include a "${set}" icon.\n\nDid you forget to include the icon or make a typo?`;
      } else {
        err.hint = `None of your icon sets ("${sets.join(
          `" | "`
        )}") include a "${set}" icon.\n\nDid you forget to include this icon in your configuration?`;
      }
    }
  }

  throw err;
}

const iconData = getIconData(collection, icon ?? set);
if (!iconData) {
  const err: any = new Error(`Unable to locate "${name}" icon!`);

  if (import.meta.env.DEV) {
    const { include = {} } = config;
    const [maybeStar] = include[set];
    if (maybeStar === "*") {
      err.hint = `The "${set}" set does not include an icon named "${icon}".\n\nIs this a typo? Is the "@iconify/json" dependency out of date?`;
    } else {
      err.hint = `The "${set}" set is not configured to include an icon named "${icon}".\n\nDo you need to add it to your configuration?`;
    }
  }

  throw err;
}

const id = `ai:${collection.prefix}:${icon ?? set}`;

if (props.size) {
  props.width = props.size;
  props.height = props.size;
  delete props.size;
}
const renderData = iconToSVG(iconData);
const normalizedProps = { ...renderData.attributes, ...props };
const normalizedBody = renderData.body;
---

<svg {...normalizedProps} data-icon={name}>
  {title && <title>{title}</title>}
  {includeSymbol && <symbol id={id} set:html={normalizedBody} />}
  <use xlink:href={`#${id}`}></use>
</svg>
