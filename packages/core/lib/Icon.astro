---
import icons, { config } from "virtual:astro-icon";
import { getIconData, iconToSVG } from "@iconify/utils";
import { cache } from "./cache.js";

interface Props {
  name: import("astro-icon").Icon;
  title?: string;
  size?: number;
  width?: number;
  height?: number;
}

const req = Astro.request;
const { name = "", title, ...props } = Astro.props;
const map = cache.get(req) ?? new Map();
const i = map.get(name) ?? 0;
map.set(name, i + 1);
cache.set(req, map);

const includeSymbol = i === 0;

let [setName, iconName] = name.split(":");

if (iconName === undefined) {
  // here `set` is actually the name of the icon
  if (setName in icons["local"].icons) {
    iconName = setName;
    setName = "local";
  }
  for (const [prefix, collection] of Object.entries(icons)) {
    if (setName in collection.icons) {
      iconName = setName;
      setName = prefix;
      break;
    }
  }
}

const collection = icons[setName];

if (!collection) {
  const err: any = new Error(`Unable to locate "${name}" icon!`);

  if (import.meta.env.DEV) {
    const { include = {} } = config;
    const sets = Object.keys(include);
    if (setName && iconName) {
      if (!sets.includes(setName)) {
        err.hint = `It looks like the "${setName}" set is not included in your configuration.\n\nDo you need to add the "${setName}" set?`;
      }
    } else {
      if (sets.length === 1) {
        err.hint = `The "${sets[0]}" set does not include a "${setName}" icon.\n\nDid you forget to include the icon or make a typo?`;
      } else {
        err.hint = `None of your icon sets ("${sets.join(
          `" | "`
        )}") include a "${setName}" icon.\n\nDid you forget to include this icon in your configuration?`;
      }
    }
  }

  throw err;
}

const iconData = getIconData(collection, iconName ?? setName);
if (!iconData) {
  const err: any = new Error(`Unable to locate "${name}" icon!`);

  if (import.meta.env.DEV) {
    const { include = {} } = config;
    const [maybeStar] = include[setName];
    if (maybeStar === "*") {
      err.hint = `The "${setName}" set does not include an icon named "${iconName}".\n\nIs this a typo? Is the "@iconify/json" dependency out of date?`;
    } else {
      err.hint = `The "${setName}" set is not configured to include an icon named "${iconName}".\n\nDo you need to add it to your configuration?`;
    }
  }

  throw err;
}

const id = `ai:${collection.prefix}:${iconName ?? setName}`;

if (props.size) {
  props.width = props.size;
  props.height = props.size;
  delete props.size;
}
const renderData = iconToSVG(iconData);
const normalizedProps = { ...renderData.attributes, ...props };
const normalizedBody = renderData.body;
---

<svg {...normalizedProps} data-icon={name}>
  {title && <title>{title}</title>}
  {includeSymbol && <symbol id={id} set:html={normalizedBody} />}
  <use xlink:href={`#${id}`}></use>
</svg>
